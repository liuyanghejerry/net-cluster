{"body":"net-cluster\r\n===========\r\n\r\n[![Build Status](https://secure.travis-ci.org/supershabam/net-cluster.png?branch=master)](http://travis-ci.org/supershabam/net-cluster)\r\n\r\n### a drop-in replacement for node's net module that works in a sane way when clustered\r\n\r\n## listening on random port\r\n\r\n```javascript\r\nserver.listen(0)\r\n```\r\nhttp://nodejs.org/api/cluster.html\r\n\r\nfrom the documentation:\r\n\r\n> Normally, this will case servers to listen on a random port. However, in a cluster, each worker will receive the same \"random\" port each time they do listen(0). In essence, the port is random the first time, but predictable thereafter. If you want to listen on a unique port, generate a port number based on the cluster worker ID.\r\n\r\n### 2 problems with this functionality\r\n* listen(0) should always bind to a random port\r\n* the listen(cluster.workerId) is unreliable\r\n  - *you can't gurantee that the port cluster.workerId is available*\r\n\r\n### how net-cluster operates\r\nlisten(0) always binds to a random port\r\n\r\n### usage\r\nnet-cluster strictly implements node's net module.\r\n\r\n```javascript\r\n/**\r\n * uses net-cluster instead of net to create a server\r\n * \r\n * Note: 2 servers will be created and they will be listening\r\n * on 2 distinct random ports. Try using node's net module instead\r\n * of net-cluster and see what happens.\r\n */\r\nvar cluster = require('cluster')\r\n  , net = require('net-cluster')\r\n  ;\r\n  \r\nif (cluster.isMaster) {\r\n  cluster.fork();\r\n  cluster.fork();\r\n} else if (cluster.isWorker) {\r\n  var server = net.createServer();\r\n  server.listen(function() {\r\n    var port = server.address().port;\r\n    console.log('listening on port: ' + port);\r\n  });\r\n}\r\n```\r\n\r\n## use cases\r\n* network application that needs to open multiple non-pre-determined ports\r\n* if you provide a module that listens on port 0\r\n  - **this is a difficult bug for people using your module**. Not \r\n    only will every instance of your module code be sharing the same \r\n    socket, but **ANY** other piece of code using listen(0) will be\r\n    sharing the same socket (other modules or even the user's code)\r\n\r\n## license\r\nMIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"a drop-in replacement for node's net module that works in a sane way when clustered","name":"Net-cluster"}